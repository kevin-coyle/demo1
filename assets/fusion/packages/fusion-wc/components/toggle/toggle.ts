import { html, unsafeCSS } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { ifDefined } from 'lit/directives/if-defined.js';
import { nanoid } from 'nanoid';
import { FusionElement } from '../FusionElement';
import styles from './toggle.scss';

/**
 * @slot - The component content
 */
@customElement('fusion-toggle')
export class FusionToggle extends FusionElement {
  static get styles() {
    return unsafeCSS(styles.toString());
  }

  /**
   * Size variant
   * <ul>
   * <li> **sm** renders a smaller toggle than the default</li>
   * </ul>
   */
  @property()
  size?: 'sm';

  /**
   * Disabled state
   * - If true, makes the checkbox within the toggle disabled
   */
  @property({ type: Boolean })
  disabled?: boolean;

  /**
   * Checked state
   * - If true, sets toggle the checkbox to active
   * - If false, sets toggle the checkbox to active
   */
  @property({ type: Boolean })
  checked?: boolean;

  /**
   * Aria describedby
   * 1) Used to connect the field note and errorNote for accessibility
   */
  @property()
  ariaDescribedBy?: string;

  /**
   * Field ID
   * - Links the label to the checkbox
   * - By default it is autogenerated by nanoid
   */
  @property()
  fieldId?: string;

  /**
   * Label
   * - The text that appears inside the label tag
   * - This does not display on the front-end, but is used for accessibility
   */
  @property()
  label: string = 'Toggle';

  /**
   * Name attribute
   * - The name attribute used on the checkbox
   */
  @property()
  name?: string;

  /**
   * Value attribute
   * - The value attribute used on the checkbox
   */
  @property()
  value?: string;

  /**
   * Success state
   */
  @property({ type: Boolean })
  isSuccess?: boolean;

  /**
   * Error state
   */
  @property({ type: Boolean })
  isError?: boolean;

  /**
   * Description  for the field
   */
  @property()
  fieldNote?: string;

  /**
   *  Error message for the field
   */
  @property()
  errorNote?: string;

  /**
   * Required attribute
   */
  @property({ type: Boolean })
  required = false;

  /**
   * Connected callback lifecycle
   * 1) Autogenerates ids to make this accessible if these properties aren't provided
   */
  connectedCallback() {
    super.connectedCallback();
    this.fieldId = this.fieldId || nanoid(); /* 1 */
  }

  /**
   * Trigger toggle event
   */
  triggerToggleEvent() {
    this.checked = !this.checked;
    this.dispatch({ eventName: 'change', detailObj: { checked: this.checked } });
  }

  /**
   * Handle on keydown events
   * 1) If the Enter key is pressed, then check the checkbox
   */
  handleKeydown(e: KeyboardEvent) {
    if (e.code === 'Enter') {
      this.triggerToggleEvent();
    }
  }

  render() {
    const componentClassNames = this.componentClassNames('fusion-c-toggle', {
      'fusion-c-toggle--sm': this.size === 'sm',
      'fusion-is-checked': this.checked === true,
      'fusion-is-disabled': this.disabled === true,
      'fusion-is-error': this.isError === true,
      'fusion-is-success': this.isSuccess === true
    });

    return html`
      <div class="${componentClassNames}">
        <div class="fusion-c-toggle-wrapper">
          <input
            class="fusion-c-toggle__checkbox"
            type="checkbox"
            id="${this.fieldId}"
            name="${ifDefined(this.name)}"
            value="${ifDefined(this.value)}"
            .checked=${this.checked}
            ?disabled=${this.disabled}
            @change=${this.triggerToggleEvent}
            @keydown=${this.handleKeydown}
          />
          <label class="fusion-c-toggle__label" for=${this.fieldId}>
            <span class="fusion-c-toggle__label-text">${this.label}</span>
            <span class="fusion-c-toggle__background"></span>
          </label>
          ${this.required ? html`<span class="fusion-c-toggle__asterisk">*</span>` : html``}
        </div>
        ${this.fieldNote || this.slotNotEmpty('field-note')
          ? html`
              <fusion-field-note ?isSuccess=${this.isSuccess} ?isDisabled=${this.disabled} id=${ifDefined(this.ariaDescribedBy)}>
                <slot name="field-note">${this.fieldNote}</slot>
              </fusion-field-note>
            `
          : html``}
        ${this.errorNote || this.slotNotEmpty('error')
          ? html`
              <fusion-field-note ?isError=${true} ?isDisabled=${this.disabled} id=${ifDefined(this.ariaDescribedBy)}>
                <slot name="error">${this.errorNote}</slot>
              </fusion-field-note>
            `
          : html``}
      </div>
    `;
  }
}

declare global {
  interface HTMLElementTagNameMap {
    'fusion-toggle': FusionToggle;
  }
}
